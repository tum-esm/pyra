import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron';
import util from 'util';
import child_process from 'child_process';
const exec = util.promisify(child_process.exec);

// TODO: Set corrent path on windows/unix (Fixed path required on every system)
const PYRA_ROOT_DIRECTORY = '/Users/moritz/Documents/research/pyra';
const PYRA_CLI_COMMAND = `${PYRA_ROOT_DIRECTORY}/.venv/bin/python ${PYRA_ROOT_DIRECTORY}/packages/cli/main.py`;

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        minHeight: 450,
        width: 900,
        minWidth: 750,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.on('window-all-closed', () => {
    app.quit();
});

// Check if pyra-cli command exists
async function check_pyra_cli(): Promise<boolean> {
    const { stdout, stderr } = await exec(PYRA_CLI_COMMAND, {
        shell: '/bin/bash',
        windowsHide: true,
    });
    return stdout.startsWith('Usage: pyra-cli [OPTIONS] COMMAND [ARGS]...');
}

async function call_pyra_cli(command: string): Promise<string> {
    return (
        await exec(`${PYRA_CLI_COMMAND} ${command}`, {
            shell: '/bin/bash',
            windowsHide: true,
        })
    ).stdout;
}

ipcMain.handle('checkCliStatus', async (_, args) => {
    try {
        return await check_pyra_cli();
    } catch {
        return false;
    }
});

ipcMain.handle('readInfoLogs', async (_, args) => {
    return (await call_pyra_cli('logs read --level INFO'))
        .split('\n')
        .filter(l => l.length > 0)
        .join('\n');
});

ipcMain.handle('readDebugLogs', async (_, args) => {
    return (await call_pyra_cli('logs read --level DEBUG'))
        .split('\n')
        .filter(l => l.length > 0)
        .join('\n');
});

ipcMain.handle('playBeep', (_, args) => {
    shell.beep();
});

ipcMain.handle('archiveLogs', async (_, args) => {
    const result = await dialog.showMessageBox({
        message: 'Do you want to archive the logs?',
        type: 'warning',
        buttons: ['Yes', 'No'],
    });
    if (result.response === 0) {
        call_pyra_cli('logs archive');
    }
});
