import json
import os
import smtplib, ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import traceback
from packages.core import types

_dir = os.path.dirname
_PROJECT_DIR = _dir(_dir(_dir(_dir(os.path.abspath(__file__)))))


def _get_pyra_version() -> str:
    """Get the current PYRA version from the UI's package.json file"""

    with open(os.path.join(_PROJECT_DIR, "packages", "ui", "package.json")) as f:
        pyra_version: str = json.load(f)["version"]
    assert pyra_version.startswith("4.")
    return pyra_version


def _get_current_log_lines() -> list[str]:
    """Get the log line from the current info.log file. Only
    returns the log lines from the latest two iterations."""

    with open(f"{_PROJECT_DIR}/logs/info.log") as f:
        latest_log_lines = f.readlines()

    log_lines_in_email: list[str] = []
    included_iterations = 0
    for l in latest_log_lines[::-1]:
        if ("main - INFO - Starting iteration" in l) or (
            "main - INFO - Starting mainloop" in l
        ):
            included_iterations += 1
        log_lines_in_email.append(l)
        if included_iterations == 2:
            break
    return log_lines_in_email[::-1]


# TODO: make SMTP server configurable


class ExceptionEmailClient:
    """Provide functionality to send emails when an exception
    occurs/is resolved."""

    @staticmethod
    def _send_email(
        config: types.ConfigDict,
        text: str,
        html: str,
        subject: str,
    ) -> None:
        sender_email = config["error_email"]["sender_address"]
        sender_password = config["error_email"]["sender_password"]
        recipients = config["error_email"]["recipients"].replace(" ", "").split(",")

        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = f"PYRA Technical User <{sender_email}>"
        message["To"] = ", ".join(recipients)

        # The email client will try to render the last part first
        message.attach(MIMEText(text, "plain"))
        message.attach(MIMEText(html, "html"))

        # Create secure connection with server and send email
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sender_email, sender_password)
            server.sendmail(
                from_addr=sender_email, to_addrs=recipients, msg=message.as_string()
            )

    @staticmethod
    def handle_resolved_exception(config: types.ConfigDict) -> None:
        """Send out an email that all exceptions have been resolved."""

        if not config["error_email"]["notify_recipients"]:
            return

        current_log_lines = _get_current_log_lines()

        logs = "".join(current_log_lines)
        pre_tag = '<pre style="background-color: #f1f5f9; color: #334155; padding: 8px 8px 12px 12px; border-radius: 3px; max-width: full; overflow-x: scroll;">'

        text = (
            "All exceptions have been resolved.\n\n"
            + f"Last 2 iteration's log lines:{logs}\n\n"
            + "This email has been generated by Pyra 4 automatically."
        )

        html = (
            "<html>"
            + '  <body style="color: #0f172a;">'
            + '    <p><strong style="color: #16a34a">'
            + "      All exceptions have been resolved."
            + "    </strong></p>"
            + "    <p><em>"
            + "    <p><strong>Last 2 iteration's log lines:</strong></p>"
            + f"    {pre_tag}<code>{logs}</code></pre>"
            + "      This email has been generated by Pyra 4 automatically."
            + "    </em></p>"
            + "  </body>"
            + "</html>"
        )

        station_id = config["general"]["station_id"]
        subject = f'✅ PYRA on "{station_id}": all exceptions resolved'
        ExceptionEmailClient._send_email(config, text, html, subject)

    @staticmethod
    def handle_occured_exception(config: types.ConfigDict, exception: Exception) -> None:
        """Send out an email that a new exception has occured."""

        if not config["error_email"]["notify_recipients"]:
            return

        pyra_version = _get_pyra_version()
        current_log_lines = _get_current_log_lines()

        tb = "\n".join(traceback.format_exception(exception))
        logs = "".join(current_log_lines)

        text = (
            f"{type(exception).__name__} has occured. Details:\n"
            + f"{tb}\nLast 2 iteration's log lines:{logs}\n"
            + f"This email has been generated by Pyra {pyra_version}."
        )

        pre_tag = '<pre style="background-color: #f1f5f9; color: #334155; padding: 8px 8px 12px 12px; border-radius: 3px; max-width: full; overflow-x: scroll;">'

        html = (
            "<html>"
            + '  <body style="color: #0f172a;">'
            + f'   <p><strong><span style="color: #dc2626">{type(exception).__name__}</span> has occured. Details:</strong></p>'
            + f"    {pre_tag}<code>{tb}</code></pre>"
            + "    <p><strong>Last 2 iteration's log lines:</strong></p>"
            + f"    {pre_tag}<code>{logs}</code></pre>"
            + f"    <p><em>This email has been generated by Pyra {pyra_version}.</em></p>"
            + "  </body>"
            + "</html>"
        )

        station_id = config["general"]["station_id"]
        subject = f'❗️ PYRA on "{station_id}": new exception "{type(exception).__name__}"'
        ExceptionEmailClient._send_email(config, text, html, subject)
