import os
import smtplib, ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import traceback

dir = os.path.dirname
PROJECT_DIR = dir(dir(dir(dir(os.path.abspath(__file__)))))


class ExceptionEmailClient:
    @staticmethod
    def _send_email(config: dict, text: str, html: str, subject: str):
        sender_email = config["error_email"]["sender_address"]
        sender_password = config["error_email"]["sender_password"]
        recipients = config["error_email"]["recipients"].replace(" ", "").split(",")

        print(sender_email, sender_password, recipients)

        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = f"PYRA Technical User <{sender_email}>"
        message["To"] = ", ".join(recipients)

        # The email client will try to render the last part first
        message.attach(MIMEText(text, "plain"))
        message.attach(MIMEText(html, "html"))

        # Create secure connection with server and send email
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sender_email, sender_password)
            server.sendmail(
                from_addr=sender_email, to_addrs=recipients, msg=message.as_string()
            )

    @staticmethod
    def handle_resolved_exception(config: dict):
        if not config["error_email"]["notify_recipients"]:
            return

        # TODO: add instance name

        text = (
            "All exceptions have been resolved.\n\nThis email "
            + "has been generated by Pyra 4 automatically."
        )

        html = (
            "<html>"
            + '  <body style="color: #0f172a;">'
            + '    <p><strong style="color: #16a34a">'
            + "      All exceptions have been resolved."
            + "    </strong></p>"
            + "    <p><em>"
            + "      This email has been generated by Pyra 4 automatically."
            + "    </em></p>"
            + "  </body>"
            + "</html>"
        )

        station_id = config["general"]["station_id"]
        subject = f'✅ PYRA on "{station_id}": all exceptions resolved'
        ExceptionEmailClient._send_email(config, text, html, subject)

    @staticmethod
    def handle_occured_exception(config: dict, exception: Exception):
        if not config["error_email"]["notify_recipients"]:
            return

        # TODO: add instance name

        with open(f"{PROJECT_DIR}/logs/info.log") as f:
            latest_log_lines = f.readlines()

        log_line_count = len(latest_log_lines)
        if log_line_count > 20:
            latest_log_lines = latest_log_lines[20:]

        for index, line in enumerate(latest_log_lines):
            line_number = log_line_count - len(latest_log_lines) + 1 + index
            latest_log_lines[index] = f"{line_number} | {line}"

        tb = "\n".join(traceback.format_exception(exception))
        logs = "".join(latest_log_lines)

        text = (
            f"{type(exception).__name__} has occured. Details:\n"
            + f"{tb}\nLast 20 log lines:{logs}\n"
            + "This email has been generated by Pyra 4 automatically."
        )

        pre_tag = '<pre style="background-color: #f1f5f9; color: #334155; padding: 8px 8px 12px 12px; border-radius: 3px; max-width: full; overflow-x: scroll;">'

        html = (
            "<html>"
            + '  <body style="color: #0f172a;">'
            + f'   <p><strong><span style="color: #dc2626">{type(exception).__name__}</span> has occured. Details:</strong></p>'
            + f"    {pre_tag}<code>{tb}</code></pre>"
            + "    <p><strong>Last 20 log lines:</strong></p>"
            + f"    {pre_tag}<code>{logs}</code></pre>"
            + "    <p><em>This email has been generated by Pyra 4 automatically.</em></p>"
            + "  </body>"
            + "</html>"
        )

        station_id = config["general"]["station_id"]
        subject = (
            f'❗️ PYRA on "{station_id}": new exception "{type(exception).__name__}"'
        )
        ExceptionEmailClient._send_email(config, text, html, subject)
